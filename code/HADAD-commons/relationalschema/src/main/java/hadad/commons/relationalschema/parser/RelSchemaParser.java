/* Generated By:JavaCC: Do not edit this line. RelSchemaParser.java */
package hadad.commons.relationalschema.parser;

import java.util.ArrayList;
import java.util.Set;

import hadad.commons.relationalschema.AccessPattern;
import hadad.commons.relationalschema.Relation;
import hadad.commons.relationalschema.RelationalSchema;

import java.util.HashSet;

/**
 * RelSchemaParser parses an input from a stream or a reader, and produces a 
 * list of schemas 
 */
public class RelSchemaParser implements RelSchemaParserConstants {

        /** The result of the last parsing of an input. */
        private ArrayList<RelationalSchema> parsed;

        /** The schema being parsed. */
        private RelationalSchema schema;

        /** The relation being parsed. */
        private Relation relation;

        /** The access pattern being parsed. */
        private Set<AccessPattern> accPats = new HashSet<AccessPattern>();

         /** The list of relations being parsed. */
        private ArrayList<Relation > relations;

        /** The name of the relation being parsed. */
        private String relationName;

        /** The arity of the relation being parsed. */
        private int relationArity;


        /**
		 * Parses the input.
		 * 
		 * @return the schemas
		 * @throws ParseException
		 *             the parse exception
		 */
        public ArrayList<RelationalSchema> parse() throws ParseException {
                SchemasList();
                return parsed;
        }

/***********
 * GRAMMAR *
 ***********/

/* Top level production */
/* QueryList ::= (Query ";")* */
  final public void SchemasList() throws ParseException {
  this.parsed = new ArrayList<RelationalSchema>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATION_NAME:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Schema();
      jj_consume_token(EOS);
        parsed.add(this.schema);
    }
    jj_consume_token(0);
  }

  final public void Schema() throws ParseException {
        this.relations = new ArrayList<Relation>();
    Relation();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      Relation();
    }
                this.schema = new RelationalSchema(this.relations);
  }

  final public void Relation() throws ParseException {
    RelationName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBR:
      jj_consume_token(LBR);
      AccessPatterns();
      jj_consume_token(RBR);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    RelationArity();
    jj_consume_token(RPAREN);
                this.relation = new Relation(this.relationName, this.relationArity);
                this.relation.addAll(this.accPats);
                this.relations.add(this.relation);
                this.accPats = new HashSet<AccessPattern>();
  }

  final public void AccessPatterns() throws ParseException {
    AccessPattern();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(PIPE);
      AccessPattern();
    }

  }

  final public void AccessPattern() throws ParseException {
        Token t;
    t = jj_consume_token(PATTERN_NAME);
                AccessPattern newPat = new AccessPattern(t.image);
                this.accPats.add(newPat);
  }

  final public void RelationName() throws ParseException {
  Token t;
    t = jj_consume_token(RELATION_NAME);
    this.relationName = t.image;
  }

  final public void RelationArity() throws ParseException {
  Token t;
    t = jj_consume_token(RELATION_ARITY);
    this.relationArity = Integer.valueOf(t.image);
  }

  /** Generated Token Manager. */
  public RelSchemaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x200,0x400,0x1000,};
   }

  /** Constructor with InputStream. */
  public RelSchemaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RelSchemaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RelSchemaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RelSchemaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RelSchemaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RelSchemaParser(RelSchemaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RelSchemaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
