/* Generated By:JavaCC: Do not edit this line. CQParser.java */
package hadad.commons.conjunctivequery.parser;


import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import hadad.commons.conjunctivequery.Atom;
import hadad.commons.conjunctivequery.ConjunctiveQuery;
import hadad.commons.conjunctivequery.IntegerConstant;
import hadad.commons.conjunctivequery.StringConstant;
import hadad.commons.conjunctivequery.Term;
import hadad.commons.conjunctivequery.Variable;


/**
 * CQParser parses an input from a stream or a reader, and produced a
 * map containing query name strings as keys and Conjunctive queries as values.
 * 
 * The language syntax allows to specify a name for a query. When no name is
 * given the parser generates a unique one, which is used as a key to the map
 * the parser produces.
 * 
 * Even if a query is named in a definition, the name is not actually part of
 * the query.
 * 
 * @creator Julien LEBLAY
 * @modified Stamatis ZAMPETAKIS
 * @modified  
 *
 * It is based on the RDF conjunctive query parser. 
 */
public class CQParser implements CQParserConstants {

        /** The logger. */
        private static Logger log = Logger.getLogger(CQParser.class);

        /** The sequence used to assign unique name to unname queries. */
        private int queryNameSeq = 0;

        /** The result of the last parsing of an input. */
        private Map<String, ConjunctiveQuery> parsed;

        /** The query being parsed. */
        private ConjunctiveQuery query;

        /** The query name of the query being parsed. */
        private String queryName;

        /** The head of the query being parsed. */
        private List<Term> head;

        /** The set of body atoms for the query being parsed. */
        private List<Atom> body;

        /** The atom being parsed. */
        private Atom atom;

        /** A map with variable name as keys (String) and actual variables as values. */
        private Map<String, Term> variables;

        /** The terms of the atom being parsed. */
        private List<Term> terms;

        /** The predicate of the triple pattern being parsed. */
        private String predicate;

        /** Number of queries parsed so far. */
        int queriesNo = 0;

        /**
		 * The main method.
		 * 
		 * @param args
		 *            the arguments
		 * @throws ParseException
		 *             the parse exception
		 */
        public static void main(String args[]) throws ParseException {
                try {
                        if (args.length == 1) {
                                System.out.println("Searching for queries in file " + args[0]);
                        } else {
                                System.out.println("You should provide the name of a file with queries as input...");
                                System.exit(-1);
                        }

                        CQParser parser = new CQParser(new FileReader(args[0]));

                        // parsing the queries of the file
                        System.out.println("Parsing the queries of the file...");
                        parser.QueryList();
            for (String n : parser.parsed.keySet()) {
                System.out.println(n +parser.parsed.get(n) + '\u005cn');
            }

                        System.out.println("\u005cn*** Parsing of queries completed successfully! ***\u005cn");
                } catch (ParseException pe) {
                        System.err.println("Problem occurred while parsing: " + pe.getMessage());
                } catch (java.io.FileNotFoundException fe) {
                        System.err.println("File " + args[0] + " could not be found...");
                }
        }

        /**
		 * Parses the input.
		 * 
		 * @return the map
		 * @throws ParseException
		 *             the parse exception
		 */
        public Map<String, ConjunctiveQuery> parse() throws ParseException {
                QueryList();
                return parsed;
        }

        /**
		 * Returns a fresh query name.
		 * 
		 * @return the string
		 * @throws ParseException
		 *             the parse exception
		 */
        public String freshQueryName() throws ParseException {
                return "AutoQueryName" + (queryNameSeq++);
        }

/*******************************
 * CONJUNCTIVE QUERIES GRAMMAR *
 *******************************/

/* Top level production */
/* QueryList ::= (Query ";")* */
  final public void QueryList() throws ParseException {
  int queriesNo = 0;
  this.parsed = new LinkedHashMap<String, ConjunctiveQuery>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANGLE:
      case QUERY_AND_PREDICATE_AND_VARIABLE_NAME:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Query();
      jj_consume_token(EOQ);
        queriesNo++;
        parsed.put(queryName, query);
    }
    jj_consume_token(0);
        log.info("ConjunctiveQueryParser: " + queriesNo + " queries were found...");
  }

/* Query ::= QueryName ":=" QueryHead ":-" QueryBody */
  final public void Query() throws ParseException {
        this.head = new ArrayList<Term>();
        this.body = new ArrayList<Atom>();
        this.variables = new HashMap<String, Term>();
        this.queryName = freshQueryName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUERY_AND_PREDICATE_AND_VARIABLE_NAME:
      QueryName();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    QueryHead();
    jj_consume_token(RULE_SEP);
    QueryBody();
    List<Term> h = new ArrayList<Term>();
    for (Term term: this.head) {
                if (term instanceof Variable) {
                        Term v = this.variables.get(((Variable) term).getName());
                        if (v == null) {
                                {if (true) throw new ParseException("Variable " + ((Variable) term).getName() + " does not appear in the query body.");}
                        }
                        h.add(v);
                } else {
                        h.add(term);
                }
    }
    this.query = new ConjunctiveQuery(this.queryName, h, this.body);
  }

/* QueryHead ::= "<" ( HeadTermList )? ">" */
  final public void QueryHead() throws ParseException {
        this.head = new ArrayList<Term>();
    jj_consume_token(LANGLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUERY_AND_PREDICATE_AND_VARIABLE_NAME:
    case STRING_CONSTANT:
    case INTEGER_CONSTANT:
      HeadTermList();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RANGLE);
  }

/* QueryName ::= identifier */
  final public void QueryName() throws ParseException {
  Token t;
    t = jj_consume_token(QUERY_AND_PREDICATE_AND_VARIABLE_NAME);
    queryName = t.image;
  }

/* HeadTermList ::= term ("," term)* */
  final public void HeadTermList() throws ParseException {
    HeadTerm();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      HeadTerm();
    }

  }

/* HeadTerm ::= <QUERY_AND_PREDICATE_AND_VARIABLE_NAME> | <STRING_CONSTANT> | <INTEGER_CONSTANT>  */
  final public void HeadTerm() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUERY_AND_PREDICATE_AND_VARIABLE_NAME:
      t = jj_consume_token(QUERY_AND_PREDICATE_AND_VARIABLE_NAME);
                                                         this.head.add(new Variable(t.image));
      break;
    case STRING_CONSTANT:
      t = jj_consume_token(STRING_CONSTANT);
                         this.head.add(new StringConstant(t.image.substring(1,t.image.length()-1)));
      break;
    case INTEGER_CONSTANT:
      t = jj_consume_token(INTEGER_CONSTANT);
                         this.head.add(new IntegerConstant(t.image));
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* QueryBody ::= Atom() ("," Atom())* */
  final public void QueryBody() throws ParseException {
        this.body = new ArrayList<Atom>();
    Atom();
        this.body.add(this.atom);
        this.atom = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      Atom();
        this.body.add(this.atom);
        this.atom = null;
    }
  }

/* Atom ::= Predicate()  "(" TermList() ")" */
  final public void Atom() throws ParseException {
        this.terms = new ArrayList<Term>();
    AtomPredicate();
    jj_consume_token(LPAREN);
    AtomTermsList();
    jj_consume_token(RPAREN);
                this.atom = new Atom(this.predicate, this.terms);
  }

  final public void AtomPredicate() throws ParseException {
  Token t;
    t = jj_consume_token(QUERY_AND_PREDICATE_AND_VARIABLE_NAME);
    predicate = t.image;
  }

/* AtomTerms ::= "(" TermList() ")" */
  final public void AtomTermsList() throws ParseException {
    AtomTerm();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      AtomTerm();
    }

  }

/* AtomTerm ::= <QUERY_AND_PREDICATE_AND_VARIABLE_NAME> | <STRING_CONSTANT> | <INTEGER_CONSTANT> */
  final public void AtomTerm() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUERY_AND_PREDICATE_AND_VARIABLE_NAME:
      t = jj_consume_token(QUERY_AND_PREDICATE_AND_VARIABLE_NAME);
                                                         this.terms.add(new Variable(t.image)); this.variables.put(t.image, new Variable(t.image));
      break;
    case STRING_CONSTANT:
      t = jj_consume_token(STRING_CONSTANT);
                         this.terms.add(new StringConstant(t.image.substring(1,t.image.length()-1)));
      break;
    case INTEGER_CONSTANT:
      t = jj_consume_token(INTEGER_CONSTANT);
                         this.terms.add(new IntegerConstant(t.image));
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public CQParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10080,0x10000,0x70000,0x1000,0x70000,0x1000,0x1000,0x70000,};
   }

  /** Constructor with InputStream. */
  public CQParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CQParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CQParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CQParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CQParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CQParser(CQParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CQParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
